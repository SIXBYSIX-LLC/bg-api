import braintree
import jsonpickle

from common import errors
from . import messages
from transaction.constants import Status as status_const
from system.models import Config


class ChargeResponse(object):
    """
    Class for charge response
    """
    #: Redirect url, generated by payment gateway
    redirect_url = None
    #: Received amount, returned by payment gateway
    received_amt = None
    #: Raw response should be in dict of payment gateway
    raw = None
    #: Standard status any of transaction.constants.Status
    status = None
    #: Human readable success / fail reason message
    message = None

    def __init__(self, **kwargs):
        for k, v in kwargs.items():
            setattr(self, k, v)


class PaymentGateway(object):
    """
    Base class for payment gateways. All payment gateway should inherit this class
    """

    def charge(self, invoice, transaction_ref, **kwargs):
        raise NotImplementedError

    def capture(self, transaction, **kwargs):
        raise NotImplementedError

    @staticmethod
    def to_json(obj):
        return jsonpickle.encode(obj)


class Postpaid(PaymentGateway):
    """
    Dummy gateway specially created for the 0 amount payment. 0 amount can be happen if all
    order item is for rental.
    """
    name = 'postpaid'

    def charge(self, invoice, transaction_ref, **kwargs):
        if invoice.total > 0:
            raise errors.PaymentError(*messages.ERR_INVALID_AMT)

        return ChargeResponse(
            redirect_url=None,
            received_amt=0,
            raw={},
            status=status_const.SUCCESS,
            message='Payment is successful'
        )


class Braintree(PaymentGateway):
    """
    Implementation of braintree gateway
    """
    name = 'braintree'

    def __init__(self, *args, **kwargs):
        """
        Loads the config
        """
        self.config = Config.objects.get(pk=self.name).config
        environment = getattr(braintree.Environment, self.config.pop('environment'))
        braintree.Configuration.configure(environment, **self.config)

        super(Braintree, self).__init__(*args, **kwargs)

    def generate_client_token(self):
        return braintree.ClientToken.generate()

    def charge(self, invoice, transaction_ref, **kwargs):
        if invoice.total < 1:
            raise errors.PaymentError(*messages.ERR_INVALID_AMT)

        result = braintree.Transaction.sale({
            "amount": str(invoice.total),
            "order_id": str(invoice.id),
            "payment_method_nonce": kwargs.get('nonce', {}).get('token'),
            "billing": self.__format_invoice_address(invoice.order.billing_address),
            "shipping": self.__format_invoice_address(invoice.order.shipping_address),
            "customer": self.__format_customer(invoice.user),
            "options": {
                "submit_for_settlement": True
            },
            "custom_fields": {
                "transaction_id": str(transaction_ref),
                "invoice_id": str(invoice.id),
                "order_id": str(invoice.order_id)
            }
        })

        return ChargeResponse(
            redirect_url=None,
            received_amt=result.transaction.amount if result.transaction else 0,
            raw=self.to_json(result),
            status=status_const.SUCCESS if result.is_success else status_const.FAIL,
            message='Payment is successful' if result.is_success else result.message
        )

    @classmethod
    def __format_invoice_address(cls, address):
        return {
            "first_name": address.first_name,
            "last_name": address.last_name,
            "company": address.company_name,
            "street_address": address.address1,
            "extended_address": address.address2,
            "locality": address.city.name_std,
            "region": address.state.code,
            "postal_code": address.zip_code,
            "country_code_alpha2": address.country.code
        }

    def __format_customer(self, user):
        profile = user.profile

        return {
            "first_name": profile.fullname.split(' ')[0],
            "last_name": profile.fullname.split(' ')[1],
            "phone": profile.phone,
            "email": user.email
        }


def get_by_name(name):
    """
    Return the payment gateway object

    :param str name: Payment gateway name
    :return PaymentGateway:
    :raise PaymentError:
    """
    pgs = [Postpaid, Braintree]
    for pg in pgs:
        if pg.name == name.lower().strip():
            return pg()

    raise errors.PaymentError(*messages.ERR_INVALID_PG_NAME)
