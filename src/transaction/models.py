import string
import urllib

from django.db import models, transaction
from djangofuture.contrib.postgres import fields as pg_fields
from django.utils.crypto import get_random_string

from common.models import BaseModel, DateTimeFieldMixin, BaseManager
from common import fields as ex_fields
from system import paymentgateway


class TransactionManager(BaseManager):
    def sell(self, gateway_name, invoice, return_url, **kwargs):
        with transaction.automic():
            pg = paymentgateway.get_by_name(gateway_name)
            response = pg.charge(invoice)

            _id = '%s%s%s' % (
                invoice.id, invoice.user_id,
                get_random_string(15, allowed_chars=string.ascii_uppercase + string.digits)
            )

            t = self.create(
                id=_id,
                payer=invoice.user,
                invoice=invoice,
                expected_amt=invoice.total,
                received_amt=response.received_amt,
                using=gateway_name,
                status=response.status,
                response=response.raw,
                return_url=return_url
            )

            q_params = urllib.urlencode({
                'status': response.status,
                'message': response.message,
                'transaction_id': id
            })
            if response.redirect_url is None:
                if '?' not in return_url:
                    q_params = '?' + q_params
                url = return_url + q_params
            else:
                url = response.redirect_url

            return url, t.id


class Transaction(BaseModel, DateTimeFieldMixin):
    #: Transaction id generated by the system
    id = models.CharField(max_length=50, primary_key=True)
    #: User who is going to pay/paid
    payer = models.ForeignKey('miniauth.User')
    #: Invoice this transaction is for
    invoice = models.ForeignKey('invoice.Invoice')
    #: Amount to be expected
    expected_amt = ex_fields.FloatField(min_value=0.0, precision=2)
    #: Amount received from payment gateway
    received_amt = ex_fields.FloatField(min_value=0.0, precision=2)
    #: Payment gateway name
    using = models.CharField(max_length=30)
    #: Status of the transaction
    status = models.CharField(max_length=30)
    #: Response from the payment gateway
    response = pg_fields.JSONField(default={})
    #: Return url after successful payment
    return_url = models.URLField(null=True)

    objects = TransactionManager()

    @property
    def _gateway(self):
        """
        :return: Payment gateway object
        """
        pass

    def refund(self, amt):
        """
        Refunds the amount

        :param Float amt: Amount to be refunded
        :return Refund: Refund object
        """
