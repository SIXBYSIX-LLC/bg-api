"""
=============
Notifications
=============
Module for email or push notification base classes
"""

from django.core.mail import EmailMessage


class BaseNotification(object):
    pass


class BaseEmailNotification(BaseNotification):
    """
    Base class for Email notification. It uses Mandrill for sending emails.
    """
    # Email templates
    ETPL_VERIFICATION = 'email-verification'
    #: To user, after successful email verification
    ETPL_WELCOME = 'welcome'
    #: To opposition, according to who has created the message
    ETPL_INQUIRY_MSG = 'inquiry-msg'
    #: To buyer, upon successful order confirmation
    ETPL_ORDER_CONFIRM = 'order-confirmation'
    #: To opposition, according to who has changed the status of order item
    ETPL_ORDER_UPDATE = 'order-update'
    #: To sellers, when invoice is paid by buyer
    ETPL_INVOICE_PAID = 'invoice-paid'
    #: To sellers, When new is generated by the system and available to sellers for review
    ETPL_INVOICE_GENERATE = 'invoice-generate'
    #: To buyer, when new invoice is available to buyer after approved by sellers
    ETPL_INVOICE_APPROVE = 'invoice-approve'
    #:  To sellers, when invoice is approved by system after review period gets over
    ETPL_INVOICE_AUTO_APPROVE = 'invoice-auto-approve'
    #: To sellers, every 3 days as reminder for invoice approve
    ETPL_INVOICE_APPROVE_REMINDER = 'invoice-approve_reminder'

    def __init__(self, *args, **kwargs):
        super(BaseEmailNotification, self).__init__()
        self.msg = EmailMessage()

    def _send(self, to, **kwargs):
        """
        Triggers ``msg.send()``

        :param list to: List of email address to be send to
        :param kwargs:
            :template_name: Template name

        :return:
        """
        self.msg.to = to
        self.msg.template_name = kwargs.get('template_name')
        self.msg.use_template_subject = True
        self.msg.use_template_from = True

        return self.msg.send()
