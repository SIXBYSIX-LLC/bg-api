__all__ = ['email']

import logging

from django.utils import timezone

from common.notifications import BaseEmailNotification
from transaction import constants as trans_const

L = logging.getLogger('bgapi.' + __name__)


class EmailNotification(BaseEmailNotification):
    def send_invoice_paid(self, invoice_instance, **kwargs):
        """
        Sends order receive email to seller. The following variable will be available in the
        template
        Variables:

        * **USER_FULLNAME**
        * **USER_EMAIL**
        * **TOTAL**
        * **PAYMENT_DATE**
        * **TRANSACTION_ID**
        * **INVOICE_ID**
        """
        # Merge tags in template
        now = kwargs.pop('now', None) or timezone.now()
        instance = invoice_instance
        transaction = instance.last_transaction(trans_const.Status.SUCCESS)

        self.msg.global_merge_vars = {
            'USER_FULLNAME': instance.user.profile.fullname,
            'USER_EMAIL': instance.user.email,
            'TOTAL': instance.total,
            'PAYMENT_DATE': instance.user.profile.localtime(now),
            'TRANSACTION_ID': transaction.id if transaction else None,
            'INVOICE_ID': instance.id,
        }

        return self._send(to=[instance.user.email], template_name=self.ETPL_INVOICE_PAID)

    def send_invoice_generate(self, invoice_instance, **kwargs):
        """
        Sends email to seller when new invoice is generated by system and available for review to
        seller. The following variable will be available in the template
        Variables:

        * **USER_FULLNAME**
        * **USER_EMAIL**
        * **TOTAL**
        * **ORDER_ID**
        * **INVOICE_ID**
        """
        L.info('Sending email notification to seller for new invoice')

        instance = invoice_instance
        merge_vars = {}
        to = []

        # Collect variables per email id to replace in template
        for invoiceline in instance.invoiceline_set.all():
            _email = invoiceline.user.email
            _vars = {
                'USER_FULLNAME': invoiceline.user.profile.fullname,
                'USER_EMAIL': _email,
                'TOTAL': invoiceline.total,
            }
            # Receivers
            to.append(_email)
            merge_vars[_email] = _vars

        self.msg.merge_vars = merge_vars
        self.msg.global_merge_vars = {
            'ORDER_ID': instance.order_id,
            'INVOICE_ID': instance.id
        }

        return self._send(to=to, template_name=self.ETPL_INVOICE_GENERATE)

    def send_approved(self, invoice_instance, **kwargs):
        """
        Sends email when all the invoicelines are approved by the sellers and invoice is
        available to buyer to pay. The following variables will be available in the template.

        * **INVOICE_ID**
        * **TOTAL**
        * **ORDER_ID**
        * **FULL**
        * **ORDER_ID**

        .. todo::

            * Attache PDF
        """
        L.info('Sending email notification to buyer for new invoice')
        instance = invoice_instance

        self.msg.global_merge_vars = {
            'USER_FULLNAME': instance.user.profile.fullname,
            'USER_EMAIL': instance.user.email,
            'TOTAL': instance.total,
            'INVOICE_ID': instance.id,
            'ORDER_ID': instance.order_id,
        }

        return self._send(to=[instance.user.email], template_name=self.ETPL_INVOICE_APPROVE)


email = EmailNotification()
